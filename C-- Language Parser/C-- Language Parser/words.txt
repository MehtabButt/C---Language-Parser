1 int		INT
1 :		VAR_DEC_OP
1 numPrint		ID
1 (		OP
1 int		INT
1 :		VAR_DEC_OP
1 num		ID
1 ,		COMMA
1 int		INT
1 :		VAR_DEC_OP
1 length		ID
1 )		CP
2 {		OB
3 int		INT
3 :		VAR_DEC_OP
3 i		ID
3 ,		COMMA
3 j		ID
3 ,		COMMA
3 first		ID
3 ,		COMMA
3 temp		ID
3 ;		SEMI_COLON
4 char		CHAR
4 :		VAR_DEC_OP
4 a		ID
4 ,		COMMA
4 b		ID
4 ,		COMMA
4 c		ID
4 ;		SEMI_COLON
6 a		ID
6 :=		ASS_OP
6 'x'		LC
6 ;		SEMI_COLON
7 b		ID
7 :=		ASS_OP
7 a		ID
7 ;		SEMI_COLON
8 j		ID
8 :=		ASS_OP
8 2		NC
8 ;		SEMI_COLON
10 int		INT
10 :		VAR_DEC_OP
10 intArr		ID
10 [		OSB
10 2		NC
10 ]		CSB
10 ;		SEMI_COLON
11 char		CHAR
11 :		VAR_DEC_OP
11 charArr		ID
11 [		OSB
11 2		NC
11 ]		CSB
11 ;		SEMI_COLON
12 intArr		ID
12 [		OSB
12 0		NC
12 ]		CSB
12 :=		ASS_OP
12 1		NC
12 ;		SEMI_COLON
13 charArr		ID
13 :=		ASS_OP
13 'a'		LC
13 ;		SEMI_COLON
14 int		INT
14 :		VAR_DEC_OP
14 iArr		ID
14 [		OSB
14 2		NC
14 ]		CSB
14 :=		ASS_OP
14 {		OB
14 1		NC
14 ,		COMMA
14 2		NC
14 }		CB
14 ;		SEMI_COLON
15 char		CHAR
15 :		VAR_DEC_OP
15 cArr		ID
15 [		OSB
15 ]		CSB
15 :=		ASS_OP
15 {		OB
15 'a'		LC
15 ,		COMMA
15 'b'		LC
15 }		CB
15 ;		SEMI_COLON
17 write		WRITE
17 (		OP
17 "enter number"		STRING
17 )		CP
17 ;		SEMI_COLON
18 write		WRITE
18 (		OP
18 i		ID
18 +		ARI_OP
18 1		NC
18 )		CP
18 ;		SEMI_COLON
20 read		READ
20 >>		INP_OP
20 i		ID
20 ;		SEMI_COLON
22 i		ID
22 :=		ASS_OP
22 length		ID
22 ;		SEMI_COLON
24 while		WHILE
24 (		OP
24 i		ID
24 /=		REL_OP
24 0		NC
24 )		CP
25 {		OB
26 first		ID
26 :=		ASS_OP
26 0		NC
26 ;		SEMI_COLON
27 j		ID
27 :=		ASS_OP
27 j		ID
27 *		ARI_OP
27 1		NC
27 ;		SEMI_COLON
29 while		WHILE
29 (		OP
29 j		ID
29 <		REL_OP
29 i		ID
29 )		CP
30 {		OB
31 write		WRITE
31 (		OP
31 j		ID
31 )		CP
31 ;		SEMI_COLON
33 if		IF
33 (		OP
33 j		ID
33 ==		REL_OP
33 0		NC
33 )		CP
33 {		OB
34 j		ID
34 :=		ASS_OP
34 j		ID
34 /		ARI_OP
34 5		NC
34 ;		SEMI_COLON
35 }		CB
36 else		ELSE
36 {		OB
37 j		ID
37 :=		ASS_OP
37 10		NC
37 ;		SEMI_COLON
38 }		CB
40 }		CB
43 i		ID
43 :=		ASS_OP
43 i		ID
43 -		ARI_OP
43 1		NC
43 ;		SEMI_COLON
48 }		CB
50 if		IF
50 (		OP
50 j		ID
50 <=		REL_OP
50 i		ID
50 )		CP
50 {		OB
52 write		WRITE
52 (		OP
52 "j is less than equal to i"		STRING
52 )		CP
52 ;		SEMI_COLON
54 }		CB
55 if		IF
55 (		OP
55 j		ID
55 >=		REL_OP
55 i		ID
55 )		CP
55 {		OB
57 write		WRITE
57 (		OP
57 "j is greater than equal to i"		STRING
57 )		CP
57 ;		SEMI_COLON
59 }		CB
60 if		IF
60 (		OP
60 j		ID
60 >		REL_OP
60 i		ID
60 )		CP
60 {		OB
62 write		WRITE
62 (		OP
62 "j is greater than i"		STRING
62 )		CP
62 ;		SEMI_COLON
64 }		CB
65 write		WRITE
65 (		OP
65 temp		ID
65 )		CP
65 ;		SEMI_COLON
67 return		RETURN
67 i		ID
67 ;		SEMI_COLON
68 }		CB
100 ENDFILE		$
